Syntax for C
/*Comments in code*/
//single-line comments

First Steps:
Library imports (first 3 are VERY commonly used);
#include<stdio.h>
	/* standard input/output functions */
#include<stdlib.h>
	/* standard utility functions */
#include<math.h>
	/* math functions */
#include<time.h>
	/* date time functions */
#include<ctype.h>
	/* character type functions */
#include<string.h>
	/* string handling functions */

#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>
#include<ctype.h>
#include<string.h>

Methods (just pick one per coding problem):
int main(){}
	function needs to return some integer at the end of execution.
	Note that everything goes inside {}
	That's why we use return 0;
int main(void){}
	function takes NO arguments
void main(void){}
	function returns 1) NO values, 2) accepts NO agrument

Print statement:
printf("Enter the thing you want to be printed");
	\n - MUST be put in "". Prints new line
	%s - inside a string, insert another string
		Placeholder for a variable
	%d - insert a variable placeholder
printf("%d", integerVariable);
printf("%s", stringVariable);
printf("%s%d", varchar, varint);

Define Variable:
A variable is a container with data stored in it.
There are many types of data in c.
char variableName [] = "character data (letters)";
	When variable is a character(letters)
	[] tells c to store a bunch of data in the variable (more than one thing)
	Use placeholder %s
int variableNumber = variable data (integers);
	"" not needed
	Use placeholder %d

Once a variable is defined, you can change it without the data type expected
	int var = 1;
	var = 2; /* changes var to the number 2 */

Display Variable:
Mostly, put the variable into a printf statement or use placeholder corresponding to the variable's data type.
	printf("%formatspecifier", variable);
		format specifiers specify what data type the variable is.
Data Types:
int - integers
	%d
double - decimal numbers
	decimals are a type of floating point number
	%f is one way to format a double
char - character
	char variable = 'any character you want'
	you can only store one character without []
	%c for 1 character
	%s for multiple characters
string - an array of multiple characters
	This includes char
	char variable[] = "multiple characters";
	Special type of data
	%s as well
const - constants
	%d
	Normally ALL CAPS is used in their name
	CONSTANT = 1;

printf function:
printf("text goes here", variable here);
	order matters
	\n - print new line (in "")
	% used to specify type of data is printing (in "")

The Numbers, Mason; what do they mean?:
+ : addition
	var = a+b;
- : subtraction
	var = a-b;
* : multiply
	var = a*b;
/ : divided by
	var = a/b;
ADVANCED
pow(,): to the power of
	var = pow(a,b); "a to the power of b"
% : modulo (remainder)
	var = a%b;
++ : increment(default to increment(add) by 1)
	var++;
-- : decrement(default to decrement(subtract) by 1)
	var--;
+ : unary plus
	+var;
- : unary minus
	-var;
abs() : Absolute value
	var = abs(a);
sqrt() : Square root
	var = sqrt(a);
ciel() : cieling (next highest integer)
	var = ciel(a);
floor() : floor (next lower integer)
	var = floor(a);
REMEMBER that any operation done to an int and floating point number returns a floating point number(%f).

User Input:
Create a variable that takes in a user input.
int user;
printf("Enter input: ");
scanf("%d", &user);
	/* store info in a float or character in scanf, use & */
printf("blah blah blah %d blah", user);
return 0;

double user;
printf("Enter input: ");
scanf("%lf", &user);
	/* lf tells scanf to look for a double */
printf("blah blah blah %lf blah", user);
return 0;

char user;
printf("Enter input: ");
scanf("%c", &user);
	/* %c is for single characters */
printf("blah blah blah %c blah", user);
return 0;

char user[# of characters];
printf("Enter input: ");
scanf("%s", user);
	/* %s is for multiple characters. Don't need & to type out multiple characters */
	/* this DOES NOT WORK when input has spaces */
printf("blah blah blah %s blah", user);
return 0;

char user[# of characters];
printf("Enter input: ");
fgets(user, # of characters, stdin);
	/* stdin is standard input. Works for space inputs.
	fgets prints a new line below input automatically. */
printf("blah blah blah %s blah", user);
return 0;

Arrays:
Tell c the datatype
[] = store multiple information
	int nums[] = {num0, num1, ..., numFin};
	printf("%d", nums[location in array]);
	/* C starts at 0. This prints only 1 element of array, wherever the  */
	return 0;

Or, for array with unknown element values and known # of elements
	int nums[# of elements the array can hold];
	nums[element #] = intval;
	printf("%d", nums[element # defined]);
	return 0;

Array of Characters
	char array[# of elements] = "characters";
	printf("%s", array);
	return 0;
	/* This is the same as inputing multiple characters into a variable. */

Define Function:
Functions and methods are the same thing.
Make sure that the function is NOT nested.
Nested function is a function with other functions in it.
	So, method{function} cannot happen

Must call the function for it to run
int main(){
	FunctionName(variable value);
	return 0;
}

void FunctionName(var1, var2, ...){
	whatever code you want for function goes here.
	/* ANY code inside the {} is code inside the function
	the datatype of ALL variables must be listed in function */
}

example:
#include <stdio.h>
#include <math.h>

int main()
{ 
    distance(2, 2);
}
void distance(int t, int u){
    int s = u*t;
    printf("The distace of speed %d and time %d is %d", u, t, s);
}

Return Statements:
Return information back when called.
	return also breaks out of a function
Put function above the method (not required IF function is prototyped)
If not prototyped, MUST put function before method

example: cubing function

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

double cube(double num); /* function prototype */

int main(){
	printf("Answer: %f", cube(decimal#));
	
	return 0;
}

double cube(double num){
	double result = num * num * num;
	return result;
}

If Statements:
All about conditions

example: Max of 2 numbers

#include <stdio.h>
#include <stdlib.h>

int max(int num1, int num2){
	int result;
	if(num1 > num2){
		result = num1;
	} 
	else if(num1 < num2){
		result = num2;
	}
	else if(num1 = num2){
		result = num2;
		printf("The values are equal\n");
	}
	return result;
}

int main(){
	printf("%d\n", max(11, 10));
	return 0;
}

Logical Operators:
Just like your logic and proof class truth tables
&& : logical AND
	both variables must have the same value to be true (binary 1)
	(a && b) is false
|| : logical OR
	if 1 variable is true (1) then true (1)
	(a || b) is true
!  : logical NOT
	if variable is true, it's now false. vice versa
	!(a && b) is true
There is no XOR command in c. XOR is the same as !=

Relation Operators:
== : if values of two operands are equal or not. If equal, true.
	(a == b)
!= : if values of two operands are equal or not. If unequal, true.
	(a != b)
>  : if greater than. If yes, true.
	(a > b)
<  : if less than. If yes, true.
	(a < b)
>= : if greater than or equal. If yes, true
	(a >= b)
<= : if less than or equal to. If yes, true
	(a <= b)
else, then false.

Switch Statements:
switch(expression){
	case constant-expression :
		statements;
		break; /* optional. 1 statement or multiple statements are allowed */
	case constant-expression :
		statements;
		break; /* optional */
	/* however many cases you want */
	default : /* optional */
	statements;
}

Structs:
Multiple data types in singular structure

/* Above main */
struct name1{
	member definition;
	/*
	must specify datatype like when defining a variable.
	char variable[length of array];
	int variable;
	*/
	member definition;
	...
	member definition;
} one or more struct variables;

	/* Now access structure members */

int main(){
	struct name1 name2;
	
	strcpy(name2.variable[length of array], "whatever");
		/* used for char vars.
		char *strcpy(char *dest, const char *src)
		copies the string pointed to by src to dest */
	name.variable = number;
		/* used for int vars */
	
	printname1(name2);
	return 0;
}
A union is an example of a struc statement

While Loops:
while(condition){
	statements;
}

Counters:
int main()
{
	int i = 0;
	do{
	printf("L\n");
	i = i+1;
	/* you can also use i++ */
    }
	while(i < 10);
	return 0;
}

For Loops:
for ( init; condition; increment ) {
   statement(s);
}

2D arrays:
int name[m][n] = {
	{var1, var2, ..., varn},
	{var1, var2, ..., varn},
	... 
	/* repeat #m times */
	{var1, var2, ..., n}
};
printf("%d", name[position of small array in array][position of value in small array]);

Memory Addresses:
define a variable

int var1 = value;
double var2 = value;
char var3 = 'value';
	/* print out physical memory address */
printf("var1: %p\nvar2: %p\nvar3: %p", &var1, &var2, &var3);
	/* %p means pointer. */
return 0;

Pointers:
type of data to use in code. No more complicated than that.
memory address of something
%p prints out pointer corresponding to some variable assigned a value
printf("%p", variable);

Pointer variable:
stores a pointer into a variable
int * pVar1 = &var2;
double * pVar2 = &var2;
char * pVar3 = &var3; /* 1 character, not multiple */

/* typical naming conventions for pointer variables: 
p and then the name of the variable you want the memory address of*/

Dereferencing Pointers:
going to memory address and stealing it.

int var1 = value;
int *pVar1 = &var1;

printf("%p", pVar1);

return 0;

A dereferenced pointer would look like:
printf("%d", *pVar1);
where p changes to d (int data) and * is added to undo the pointer variable pVar1
"Normal" way
printf("%d", *&var1);
where * cancels out with & to just print var1 value

Writing Files:
filemodes:
r = read
w = write
a = append
creating a file
	FILE * fpointer = fopen("C:\\name of file to open.filetype", filemode);
	/* can specify any path on pc. If no specified location, it creates
	the file wherever the directory to your c files are. Use \\ not \ */
	fprintf(fpointer, "text"); /* adds text to file */
	
	fclose(fpointer);
	/* ALWAYS close your files when program is done */
	return 0;
to add text to a file, change filemode to a

Reading Files:
r filemode
reads info from the file
	char line[255];
	FILE *fpointer = fopen("L:\\Spring 2021\\For Finals\\EGN3211\\FE practice code\\something.txt", "r");
	
	fgets(line, 255, fpointer);
	fgets(line, 255, fpointer);
	printf("%s", line);
	
	fclose(fpointer);
	return 0;

>> - Binary shift right
	shift binary a value to the right b times
	a = a << b;
<< - Binary shift left
	shift binary a value to the left b times 
	a = a >> b;